{"version":3,"sources":["../../../src/components/clusters/clusterConfig.js"],"names":["_","appEvents","angular","ClusterConfigCtrl","$scope","$injector","backendSrv","$q","contextSrv","$location","$window","alertSrv","self","isOrgEditor","hasRole","cluster","type","pageReady","prometheusDeployed","showHelp","showPrometheusExample","document","title","getDatasources","then","promises","search","push","getCluster","getDeployments","forEach","ds","items","deployment","metadata","name","getPrometheusDatasources","all","id","get","jsonData","result","datasources","filter","request","url","method","headers","saveDatasource","set","catch","err","blob","Blob","generatePrometheusConfig","saveToFile","toJson","generatePrometheusConfigMap","nodeExporterDaemonSet","kubestateDeployment","filename","blobUrl","window","URL","createObjectURL","element","createElement","setAttribute","style","display","body","appendChild","click","removeChild","question","emit","text","yesText","icon","onConfirm","saveAndDeploy","undeployPrometheus","put","post","deployPrometheus","clusterId","resources","length","cm","data","daemonSet","deploymentName","cmName","pods","pod","history","back","checkApiVersion","createConfigMap","console","log","createDeployment","createDaemonSet","prometheusDeployment","deleteConfigMap","deleteDeployment","deleteDaemonSet","deletePods","templateUrl","nodeExporterImage","prometheusImage","kubestateImage"],"mappings":"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","file":"clusterConfig.js","sourcesContent":["import _ from 'lodash';\nimport appEvents from 'app/core/app_events';\nimport angular from 'angular';\n\nexport class ClusterConfigCtrl {\n  /** @ngInject */\n  constructor($scope, $injector, backendSrv, $q, contextSrv, $location, $window, alertSrv) {\n    var self = this;\n    this.$q = $q;\n    this.backendSrv = backendSrv;\n    this.isOrgEditor = contextSrv.hasRole('Editor') || contextSrv.hasRole('Admin');\n    this.$window = $window;\n    this.$location = $location;\n    this.cluster = {\n      type: 'raintank-kubernetes-datasource'\n    };\n    this.pageReady = false;\n    this.prometheusDeployed = false;\n    this.alertSrv = alertSrv;\n    this.showHelp = false;\n    this.showPrometheusExample = false;\n    document.title = 'Grafana Kubernetes App';\n\n    this.getDatasources().then(() => {\n      self.pageReady = true;\n    });\n  }\n\n  toggleHelp() {\n    this.showHelp = !this.showHelp;\n  }\n\n  togglePrometheusExample() {\n    this.showPrometheusExample = !this.showPrometheusExample;\n  }\n\n  getDatasources() {\n    var self = this;\n    var promises = [];\n    if (\"cluster\" in self.$location.search()) {\n      promises.push(self.getCluster(this.$location.search().cluster).then(() => {\n        return self.getDeployments().then(ds => {\n          _.forEach(ds.items, function (deployment) {\n            if (deployment.metadata.name === \"prometheus-deployment\") {\n              self.prometheusDeployed = true;\n            }\n          });\n        });\n      }));\n    }\n\n    promises.push(self.getPrometheusDatasources());\n\n    return this.$q.all(promises);\n  }\n\n  getCluster(id) {\n    var self = this;\n    return this.backendSrv.get('/api/datasources/' + id)\n      .then((ds) => {\n        if (!(ds.jsonData.ds)) {\n          ds.jsonData.ds = \"\";\n        }\n        self.cluster = ds;\n      });\n  }\n\n  getPrometheusDatasources() {\n    var self = this;\n    return this.backendSrv.get('/api/datasources')\n    .then((result) => {\n      self.datasources = _.filter(result, {\n        \"type\": \"prometheus\"\n      });\n    });\n  }\n\n  getDeployments() {\n    var self = this;\n    return this.backendSrv.request({\n      url: 'api/datasources/proxy/' + self.cluster.id + '/apis/apps/v1beta1/namespaces/kube-system/deployments',\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n\n  save() {\n    return this.saveDatasource()\n      .then(() => {\n        return this.getDatasources();\n      })\n      .then(() => {\n        this.alertSrv.set(\"Saved\", \"Saved and successfully connected to \" + this.cluster.name, 'success', 3000);\n      })\n      .catch(err => {\n        this.alertSrv.set(\"Saved\", \"Saved but failed to connect to \" + this.cluster.name + '. Error: ' + err, 'error', 5000);\n      });\n  }\n\n  savePrometheusConfigToFile() {\n    let blob = new Blob([this.generatePrometheusConfig()], {\n      type: \"application/yaml\"\n    });\n    this.saveToFile('prometheus.yml', blob);\n  }\n\n  savePrometheusConfigMapToFile() {\n    let blob = new Blob([angular.toJson(this.generatePrometheusConfigMap(), true)], {\n      type: \"application/json\"\n    });\n    this.saveToFile('grafanak8s-prometheus-cm.yml', blob);\n  }\n\n  saveNodeExporterDSToFile() {\n    let blob = new Blob([angular.toJson(nodeExporterDaemonSet, true)], {\n      type: \"application/json\"\n    });\n    this.saveToFile('grafanak8s-node-exporter-ds.json', blob);\n  }\n\n  saveKubeStateDeployToFile() {\n    let blob = new Blob([angular.toJson(kubestateDeployment, true)], {\n      type: \"application/json\"\n    });\n    this.saveToFile('grafanak8s-kubestate-deploy.json', blob);\n  }\n\n  saveToFile(filename, blob) {\n    let blobUrl = window.URL.createObjectURL(blob);\n\n    let element = document.createElement('a');\n    element.setAttribute('href', blobUrl);\n    element.setAttribute('download', filename);\n    element.style.display = 'none';\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n  }\n\n  deploy() {\n    var question = !this.prometheusDeployed ?\n      'This action will deploy Prometheus exporters to your Kubernetes cluster.' +\n      'Are you sure you want to deploy?' :\n      'This action will update the Prometheus exporters on your Kubernetes cluster. ' +\n      'Are you sure you want to deploy?';\n    appEvents.emit('confirm-modal', {\n      title: 'Deploy to Kubernetes Cluster',\n      text: question,\n      yesText: \"Deploy\",\n      icon: \"fa-question\",\n      onConfirm: () => {\n        this.saveAndDeploy();\n      }\n    });\n  }\n\n  undeploy() {\n    var question = 'This action will remove the DaemonSet on your Kubernetes cluster that collects health metrics. ' +\n      'Are you sure you want to remove it?';\n\n    appEvents.emit('confirm-modal', {\n      title: 'Remove Daemonset Collector',\n      text: question,\n      yesText: \"Remove\",\n      icon: \"fa-question\",\n      onConfirm: () => {\n        this.undeployPrometheus();\n      }\n    });\n  }\n\n  saveDatasource() {\n    if (this.cluster.id) {\n      return this.backendSrv.put('/api/datasources/' + this.cluster.id, this.cluster);\n    } else {\n      return this.backendSrv.post('/api/datasources', this.cluster);\n    }\n  }\n\n  saveAndDeploy() {\n    return this.saveDatasource()\n      .then(() => {\n        return this.deployPrometheus();\n      });\n  }\n\n  checkApiVersion(clusterId) {\n    return this.backendSrv.request({\n      url: 'api/datasources/proxy/' + clusterId + '/apis/extensions/v1beta1',\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(result => {\n      if (!result.resources || result.resources.length === 0) {\n        throw \"This Kubernetes cluster does not support v1beta1 of the API which is needed to deploy automatically. \" +\n          \"You can install manually using the instructions at the bottom of the page.\";\n      }\n    });\n  }\n\n  createConfigMap(clusterId, cm) {\n    return this.backendSrv.request({\n      url: 'api/datasources/proxy/' + clusterId + '/api/v1/namespaces/kube-system/configmaps',\n      method: 'POST',\n      data: cm,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n\n  createDaemonSet(clusterId, daemonSet) {\n    return this.backendSrv.request({\n      url: 'api/datasources/proxy/' + clusterId + '/apis/extensions/v1beta1/namespaces/kube-system/daemonsets',\n      method: 'POST',\n      data: daemonSet,\n      headers: {\n        'Content-Type': \"application/json\"\n      }\n    });\n  }\n\n  deleteDaemonSet(clusterId) {\n    return this.backendSrv.request({\n      url: 'api/datasources/proxy/' + clusterId + '/apis/extensions/v1beta1/namespaces/kube-system/daemonsets/node-exporter',\n      method: 'DELETE',\n    });\n  }\n\n  createDeployment(clusterId, deployment) {\n    return this.backendSrv.request({\n      url: 'api/datasources/proxy/' + clusterId + '/apis/apps/v1beta1/namespaces/kube-system/deployments',\n      method: 'POST',\n      data: deployment,\n      headers: {\n        'Content-Type': \"application/json\"\n      }\n    });\n  }\n\n  deleteDeployment(clusterId, deploymentName) {\n    return this.backendSrv.request({\n      url: 'api/datasources/proxy/' + clusterId + '/apis/apps/v1beta1/namespaces/kube-system/deployments/' + deploymentName,\n      method: 'DELETE'\n    }).then(() => {\n      return this.backendSrv.request({\n        url: 'api/datasources/proxy/' + clusterId +\n          '/apis/extensions/v1beta1/namespaces/kube-system/replicasets?labelSelector=grafanak8sapp%3Dtrue',\n        method: 'DELETE'\n      });\n    });\n  }\n\n  deleteConfigMap(clusterId, cmName) {\n    return this.backendSrv.request({\n      url: 'api/datasources/proxy/' + clusterId + '/api/v1/namespaces/kube-system/configmaps/' + cmName,\n      method: 'DELETE'\n    });\n  }\n\n  deletePods() {\n    var self = this;\n    return this.backendSrv.request({\n      url: 'api/datasources/proxy/' + self.cluster.id +\n        '/api/v1/namespaces/kube-system/pods?labelSelector=grafanak8sapp%3Dtrue',\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(pods => {\n      if (!pods || pods.items.length === 0) {\n        throw \"No pods found to update.\";\n      }\n\n      var promises = [];\n\n      _.forEach(pods.items, pod => {\n        promises.push(this.backendSrv.request({\n          url: 'api/datasources/proxy/' + self.cluster.id + '/api/v1/namespaces/kube-system/pods/' + pod.metadata.name,\n          method: 'DELETE',\n        }));\n      });\n\n      return this.$q.all(promises);\n    });\n  }\n\n  cancel() {\n    this.$window.history.back();\n  }\n\n  deployPrometheus() {\n    let self = this;\n    if (!this.cluster || !this.cluster.id) {\n      this.alertSrv.set(\"Error\", \"Could not connect to cluster.\", 'error');\n      return;\n    }\n    return this.checkApiVersion(self.cluster.id)\n      .then(() => {\n        return this.createConfigMap(self.cluster.id, this.generatePrometheusConfigMap());\n      })\n      .catch(err => {\n        console.log(err);\n        this.alertSrv.set(\"Error\", err, 'error');\n      })\n      .then(() => {\n        return this.createDeployment(self.cluster.id, kubestateDeployment);\n      })\n      .catch(err => {\n        console.log(err);\n        this.alertSrv.set(\"Error\", err, 'error');\n      })\n      .then(() => {\n        return this.createDaemonSet(self.cluster.id, nodeExporterDaemonSet);\n      })\n      .catch(err => {\n        console.log(err);\n        this.alertSrv.set(\"Error\", err, 'error');\n      })\n      .then(() => {\n        return this.createDeployment(self.cluster.id, prometheusDeployment);\n      })\n      .catch(err => {\n        console.log(err);\n        this.alertSrv.set(\"Error\", err, 'error');\n      }).then(() => {\n        this.prometheusDeployed = true;\n        this.alertSrv.set(\"Deployed\", \"Prometheus and exporters have been deployed to \" + self.cluster.name, 'success', 5000);\n      });\n  }\n\n  undeployPrometheus() {\n    var self = this;\n    return this.deleteConfigMap(self.cluster.id, 'prometheus-configmap')\n      .then(() => {\n        return this.deleteDeployment(self.cluster.id, 'kube-state-metrics');\n      })\n      .catch(err => {\n        console.log(err);\n        this.alertSrv.set(\"Error\", err, 'error');\n      })\n      .then(() => {\n        return this.deleteDeployment(self.cluster.id, 'prometheus-deployment');\n      })\n      .catch(err => {\n        console.log(err);\n        this.alertSrv.set(\"Error\", err, 'error');\n      })\n      .then(() => {\n        return this.deleteDaemonSet(self.cluster.id);\n      })\n      .catch(err => {\n        console.log(err);\n        this.alertSrv.set(\"Error\", err, 'error');\n      })\n      .then(() => {\n        return this.deletePods();\n      })\n      .catch(err => {\n        console.log(err);\n        this.alertSrv.set(\"Error\", err, 'error');\n      })\n      .then(() => {\n        this.prometheusDeployed = false;\n        this.alertSrv.set(\"Grafana K8s removed\", \"Prometheus and exporters removed from \" + self.cluster.name, 'success', 5000);\n      });\n  }\n\n  generatePrometheusConfig() {\n    return `scrape_configs:\n- job_name: \\'kubernetes-kubelet\\'\n  scheme: https\n  tls_config:\n    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n    insecure_skip_verify: true\n  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n  kubernetes_sd_configs:\n  - role: node\n  relabel_configs:\n  - action: labelmap\n    regex: __meta_kubernetes_node_label_(.+)\n  - target_label: __address__\n    replacement: kubernetes.default.svc:443\n  - source_labels: [__meta_kubernetes_node_name]\n    regex: (.+)\n    target_label: __metrics_path__\n    replacement: /api/v1/nodes/\\${1}/proxy/metrics\n  - source_labels: [__address__]\n    regex: .*\n    target_label: kubernetes_cluster\n    replacement: ${this.cluster.name}\n- job_name: \\'kubernetes-cadvisor\\'\n  scheme: https\n  tls_config:\n    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n    insecure_skip_verify: true\n  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n  kubernetes_sd_configs:\n  - role: node\n  relabel_configs:\n  - action: labelmap\n    regex: __meta_kubernetes_node_label_(.+)\n  - target_label: __address__\n    replacement: kubernetes.default.svc:443\n  - source_labels: [__meta_kubernetes_node_name]\n    regex: (.+)\n    target_label: __metrics_path__\n    replacement: /api/v1/nodes/\\${1}/proxy/metrics/cadvisor\n  - source_labels: [__address__]\n    regex: .*\n    target_label: kubernetes_cluster\n    replacement: ${this.cluster.name}\n- job_name: \\'kubernetes-kube-state\\'\n  kubernetes_sd_configs:\n  - role: pod\n  relabel_configs:\n  - action: labelmap\n    regex: __meta_kubernetes_pod_label_(.+)\n  - source_labels: [__meta_kubernetes_namespace]\n    action: replace\n    target_label: kubernetes_namespace\n  - source_labels: [__meta_kubernetes_pod_name]\n    action: replace\n    target_label: kubernetes_pod_name\n  - source_labels: [__meta_kubernetes_pod_label_grafanak8sapp]\n    regex: .*true.*\n    action: keep\n  - source_labels: [__address__]\n    regex: .*\n    target_label: kubernetes_cluster\n    replacement: ${this.cluster.name}\n  - source_labels: ['__meta_kubernetes_pod_label_daemon', '__meta_kubernetes_pod_node_name']\n    regex: 'node-exporter;(.*)'\n    action: replace\n    target_label: nodename`;\n  }\n\n  generatePrometheusConfigMap() {\n    return {\n      \"apiVersion\": \"v1\",\n      \"kind\": \"ConfigMap\",\n      \"metadata\": {\n        \"name\": \"prometheus-configmap\"\n      },\n      \"data\": {\n        \"prometheus.yml\": this.generatePrometheusConfig()\n      }\n    };\n  }\n}\n\nClusterConfigCtrl.templateUrl = 'components/clusters/partials/cluster_config.html';\n\nconst nodeExporterImage='quay.io/prometheus/node-exporter:v0.15.0';\nconst prometheusImage = 'prom/prometheus:v2.0.0';\nconst kubestateImage = 'quay.io/coreos/kube-state-metrics:v1.1.0';\n\nlet prometheusDeployment = {\n  \"apiVersion\": \"apps/v1beta1\",\n  \"kind\": \"Deployment\",\n  \"metadata\": {\n    \"name\": \"prometheus-deployment\",\n    \"namespace\": \"kube-system\"\n  },\n  \"spec\": {\n    \"replicas\": 1,\n    \"strategy\": {\n      \"rollingUpdate\": {\n        \"maxSurge\": 0,\n        \"maxUnavailable\": 1\n      },\n      \"type\": \"RollingUpdate\"\n    },\n    \"selector\": {\n      \"matchLabels\": {\n        \"app\": \"prometheus\",\n        \"grafanak8sapp\": \"true\"\n      }\n    },\n    \"template\": {\n      \"metadata\": {\n        \"name\": \"prometheus\",\n        \"labels\": {\n          \"app\": \"prometheus\",\n          \"grafanak8sapp\": \"true\"\n        }\n      },\n      \"spec\": {\n        \"containers\": [{\n          \"name\": \"prometheus\",\n          \"image\": prometheusImage,\n          \"args\": [\n            '--config.file=/etc/prometheus/prometheus.yml',\n          ],\n          \"ports\": [{\n            \"name\": \"web\",\n            \"containerPort\": 9090\n          }],\n          \"env\": [],\n          \"volumeMounts\": [{\n            \"name\": \"config-volume\",\n            \"mountPath\": \"/etc/prometheus\"\n          }]\n        }],\n        \"volumes\": [{\n          \"name\": \"config-volume\",\n          \"configMap\": {\n            \"name\": \"prometheus-configmap\"\n          }\n        }]\n      }\n    }\n  }\n};\n\nlet kubestateDeployment = {\n  \"apiVersion\": \"apps/v1beta1\",\n  \"kind\": \"Deployment\",\n  \"metadata\": {\n    \"name\": \"kube-state-metrics\",\n    \"namespace\": \"kube-system\"\n  },\n  \"spec\": {\n    \"selector\": {\n      \"matchLabels\": {\n        \"k8s-app\": \"kube-state-metrics\",\n        \"grafanak8sapp\": \"true\"\n      }\n    },\n    \"replicas\": 1,\n    \"template\": {\n      \"metadata\": {\n        \"labels\": {\n          \"k8s-app\": \"kube-state-metrics\",\n          \"grafanak8sapp\": \"true\"\n        }\n      },\n      \"spec\": {\n        \"containers\": [{\n          \"name\": \"kube-state-metrics\",\n          \"image\": kubestateImage,\n          \"ports\": [{\n            \"name\": \"http-metrics\",\n            \"containerPort\": 8080\n          }],\n          \"readinessProbe\": {\n            \"httpGet\": {\n              \"path\": \"/healthz\",\n              \"port\": 8080\n            },\n            \"initialDelaySeconds\": 5,\n            \"timeoutSeconds\": 5\n          }\n        }]\n      }\n    }\n  }\n};\n\nconst nodeExporterDaemonSet = {\n  \"kind\": \"DaemonSet\",\n  \"apiVersion\": \"extensions/v1beta1\",\n  \"metadata\": {\n    \"name\": \"node-exporter\",\n    \"namespace\": \"kube-system\"\n  },\n  \"spec\": {\n    \"selector\": {\n      \"matchLabels\": {\n        \"daemon\": \"node-exporter\",\n        \"grafanak8sapp\": \"true\"\n      }\n    },\n    \"template\": {\n      \"metadata\": {\n        \"name\": \"node-exporter\",\n        \"labels\": {\n          \"daemon\": \"node-exporter\",\n          \"grafanak8sapp\": \"true\"\n        }\n      },\n      \"spec\": {\n        \"volumes\": [\n          {\n            \"name\": \"proc\",\n            \"hostPath\": {\n              \"path\": \"/proc\"\n            }\n          },\n          {\n            \"name\": \"sys\",\n            \"hostPath\": {\n              \"path\": \"/sys\"\n            }\n          }\n        ],\n        \"containers\": [{\n          \"name\": \"node-exporter\",\n          \"image\": nodeExporterImage,\n          \"args\": [\n            \"--path.procfs=/proc_host\",\n            \"--path.sysfs=/host_sys\"\n          ],\n          \"ports\": [{\n            \"name\": \"node-exporter\",\n            \"hostPort\": 9100,\n            \"containerPort\": 9100\n          }],\n          \"volumeMounts\": [{\n              \"name\": \"sys\",\n              \"readOnly\": true,\n              \"mountPath\": \"/host_sys\"\n            },\n            {\n              \"name\": \"proc\",\n              \"readOnly\": true,\n              \"mountPath\": \"/proc_host\"\n            }\n          ],\n          \"imagePullPolicy\": \"IfNotPresent\"\n        }],\n        \"restartPolicy\": \"Always\",\n        \"hostNetwork\": true,\n        \"hostPID\": true\n      }\n    }\n  }\n};\n"]}