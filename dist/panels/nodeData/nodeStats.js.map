{"version":3,"sources":["../../../src/panels/nodeData/nodeStats.js"],"names":["slugify","str","slug","replace","kbn","_","moment","NodeStatsDatasource","datasourceSrv","timeSrv","prometheusDS","query","get","then","datasource","metricsQuery","range","from","subtract","to","targets","expr","format","legendFormat","legend","interval","result","data","cluster_id","podsPerNode","cpuPerNode","memoryPerNode","podQuery","cpuQuery","memoryQuery","issuePrometheusQuery","node","nodeStats","formatFunc","valueFormats","nodeName","metadata","name","findFunction","o","target","substring","length","podsUsedData","find","podsUsed","last","datapoints","podsUsedPerc","status","capacity","pods","cpuData","cpuUsage","cpuUsageFormatted","cpuUsagePerc","cpu","memData","memoryUsage","memCapacity","memory","memUsageFormatted","memCapacityFormatted","memoryUsagePerc"],"mappings":";;;;;;;;;;;;;AA6FA,WAASA,OAAT,CAAiBC,GAAjB,EAAsB;AACpB,QAAIC,OAAOD,IAAIE,OAAJ,CAAY,GAAZ,EAAiB,IAAjB,EAAuBA,OAAvB,CAA+B,GAA/B,EAAoC,KAApC,EAA2CA,OAA3C,CAAmD,MAAnD,EAA2D,GAA3D,EAAgEA,OAAhE,CAAwE,OAAxE,EAAiF,EAAjF,CAAX;AACA,WAAOD,IAAP;AACD;;;AAhGME,S;;AACAC,O;;AACAC,Y;;;;;;;;;;;;;;;;;;;;;AAEcC,yB;AACnB,qCAAYC,aAAZ,EAA2BC,OAA3B,EAAoC;AAAA;;AAClC,eAAKD,aAAL,GAAqBA,aAArB;AACA,eAAKC,OAAL,GAAeA,OAAf;AACD;;;;+CAEoBC,Y,EAAcC,K,EAAO;AACxC,mBAAO,KAAKH,aAAL,CAAmBI,GAAnB,CAAuBF,YAAvB,EACJG,IADI,CACC,UAACC,UAAD,EAAgB;AACpB,kBAAIC,eAAe;AACjBC,uBAAO,EAAEC,MAAMX,SAASY,QAAT,CAAkB,CAAlB,EAAqB,QAArB,CAAR,EAAwCC,IAAIb,QAA5C,EADU;AAEjBc,yBAAS,CAAC,EAAEC,MAAMV,MAAMU,IAAd,EAAoBC,QAAQ,aAA5B,EAAD,CAFQ;AAGjBC,8BAAcZ,MAAMa,MAHH;AAIjBC,0BAAU;AAJO,eAAnB;AAMA,qBAAOX,WAAWH,KAAX,CAAiBI,YAAjB,CAAP;AACD,aATI,EASFF,IATE,CASG,UAACa,MAAD,EAAY;AAClB,kBAAIA,UAAUA,OAAOC,IAArB,EAA2B;AACzB,uBAAOD,OAAOC,IAAd;AACD;AACD,qBAAO,EAAP;AACD,aAdI,CAAP;AAeD;;;uCAEYC,U,EAAYlB,Y,EAAc;AAAA;;AACrC,gBAAImB,oBAAJ;AAAA,gBAAiBC,mBAAjB;AAAA,gBAA6BC,sBAA7B;;AAEA,gBAAMC,WAAW;AACfX,oBAAM,6FADS;AAEfG,sBAAQ;AAFO,aAAjB;AAIA,gBAAMS,WAAW;AACfZ,oBAAM,+DADS;AAEfG,sBAAQ;AAFO,aAAjB;AAIA,gBAAMU,cAAc;AAClBb,oBAAM,kEADY;AAElBG,sBAAQ;AAFU,aAApB;;AAKA,mBAAO,KAAKW,oBAAL,CAA0BzB,YAA1B,EAAwCsB,QAAxC,EACJnB,IADI,CACC,gBAAQ;AACZgB,4BAAcF,IAAd;AACA;AACD,aAJI,EAIFd,IAJE,CAIG,YAAM;AACZ,qBAAO,MAAKsB,oBAAL,CAA0BzB,YAA1B,EAAwCuB,QAAxC,CAAP;AACD,aANI,EAOJpB,IAPI,CAOC,gBAAQ;AACZiB,2BAAaH,IAAb;AACA;AACD,aAVI,EAUFd,IAVE,CAUG,YAAM;AACZ,qBAAO,MAAKsB,oBAAL,CAA0BzB,YAA1B,EAAwCwB,WAAxC,CAAP;AACD,aAZI,EAaJrB,IAbI,CAaC,gBAAQ;AACZkB,8BAAgBJ,IAAhB;AACA,qBAAO,EAACE,wBAAD,EAAcC,sBAAd,EAA0BC,4BAA1B,EAAP;AACD,aAhBI,CAAP;AAiBD;;;8CAEmBK,I,EAAMC,S,EAAW;AACnC,gBAAIC,aAAalC,IAAImC,YAAJ,CAAiB,aAAjB,CAAjB;AACA,gBAAMC,WAAWxC,QAAQoC,KAAKK,QAAL,CAAcC,IAAtB,CAAjB;AACA,gBAAMC,eAAe,SAAfA,YAAe,CAASC,CAAT,EAAY;AAAC,qBAAOA,EAAEC,MAAF,CAASC,SAAT,CAAmB,CAAnB,EAAsBF,EAAEC,MAAF,CAASE,MAAT,GAAkB,CAAxC,MAA+CP,QAAtD;AAAgE,aAAlG;AACA,gBAAMQ,eAAe3C,EAAE4C,IAAF,CAAOZ,UAAUR,WAAjB,EAA8Bc,YAA9B,CAArB;AACA,gBAAIK,YAAJ,EAAkB;AAChBZ,mBAAKc,QAAL,GAAgB7C,EAAE8C,IAAF,CAAOH,aAAaI,UAApB,EAAgC,CAAhC,CAAhB;AACAhB,mBAAKiB,YAAL,GAAoBf,WAAWF,KAAKc,QAAL,GAAgBd,KAAKkB,MAAL,CAAYC,QAAZ,CAAqBC,IAAhD,EAAsD,CAAtD,EAAyD,CAAzD,CAApB;AACD;;AAED,gBAAMC,UAAUpD,EAAE4C,IAAF,CAAOZ,UAAUP,UAAjB,EAA6Ba,YAA7B,CAAhB;AACA,gBAAIc,OAAJ,EAAa;AACXrB,mBAAKsB,QAAL,GAAgBrD,EAAE8C,IAAF,CAAOM,QAAQL,UAAf,EAA2B,CAA3B,CAAhB;AACAhB,mBAAKuB,iBAAL,GAAyBvD,IAAImC,YAAJ,CAAiB,MAAjB,EAAyBH,KAAKsB,QAA9B,EAAwC,CAAxC,EAA2C,IAA3C,CAAzB;AACAtB,mBAAKwB,YAAL,GAAoBtB,WAAWF,KAAKsB,QAAL,GAAgBtB,KAAKkB,MAAL,CAAYC,QAAZ,CAAqBM,GAAhD,EAAqD,CAArD,EAAwD,CAAxD,CAApB;AACD;;AAED,gBAAMC,UAAUzD,EAAE4C,IAAF,CAAOZ,UAAUN,aAAjB,EAAgCY,YAAhC,CAAhB;AACA,gBAAImB,OAAJ,EAAa;AACX1B,mBAAK2B,WAAL,GAAmB1D,EAAE8C,IAAF,CAAOW,QAAQV,UAAf,EAA2B,CAA3B,CAAnB;AACA,kBAAMY,cAAc5B,KAAKkB,MAAL,CAAYC,QAAZ,CAAqBU,MAArB,CAA4BnB,SAA5B,CAAsC,CAAtC,EAAyCV,KAAKkB,MAAL,CAAYC,QAAZ,CAAqBU,MAArB,CAA4BlB,MAA5B,GAAqC,CAA9E,IAAoF,IAAxG;AACAX,mBAAK8B,iBAAL,GAAyB9D,IAAImC,YAAJ,CAAiB,OAAjB,EAA0BH,KAAK2B,WAA/B,EAA4C,CAA5C,EAA+C,IAA/C,CAAzB;AACA3B,mBAAK+B,oBAAL,GAA4B/D,IAAImC,YAAJ,CAAiB,OAAjB,EAA0ByB,WAA1B,EAAuC,CAAvC,EAA0C,IAA1C,CAA5B;AACA5B,mBAAKgC,eAAL,GAAuB9B,WAAYF,KAAK2B,WAAL,GAAmBC,WAA/B,EAA6C,CAA7C,EAAgD,CAAhD,CAAvB;AACD;;AAED,mBAAO5B,IAAP;AACD;;;;;;yBAtFkB7B,mB","file":"nodeStats.js","sourcesContent":["import kbn from 'app/core/utils/kbn';\nimport _ from 'lodash';\nimport moment from 'moment';\n\nexport default class NodeStatsDatasource {\n  constructor(datasourceSrv, timeSrv) {\n    this.datasourceSrv = datasourceSrv;\n    this.timeSrv = timeSrv;\n  }\n\n  issuePrometheusQuery(prometheusDS, query) {\n    return this.datasourceSrv.get(prometheusDS)\n      .then((datasource) => {\n        var metricsQuery = {\n          range: { from: moment().subtract(5, 'minute'), to: moment() },\n          targets: [{ expr: query.expr, format: 'time_series' }],\n          legendFormat: query.legend,\n          interval: '60s',\n        };\n        return datasource.query(metricsQuery);\n      }).then((result) => {\n        if (result && result.data) {\n          return result.data;\n        }\n        return {};\n      });\n  }\n\n  getNodeStats(cluster_id, prometheusDS) {\n    let podsPerNode, cpuPerNode, memoryPerNode;\n\n    const podQuery = {\n      expr: 'sum(label_join(kubelet_running_pod_count, \"node\",  \"\", \"kubernetes_io_hostname\")) by (node)',\n      legend: \"{{node}}\",\n    };\n    const cpuQuery = {\n      expr: 'sum(kube_pod_container_resource_requests_cpu_cores) by (node)',\n      legend: \"{{node}}\",\n    };\n    const memoryQuery = {\n      expr: 'sum(kube_pod_container_resource_requests_memory_bytes) by (node)',\n      legend: \"{{node}}\",\n    };\n\n    return this.issuePrometheusQuery(prometheusDS, podQuery)\n      .then(data => {\n        podsPerNode = data;\n        return;\n      }).then(() => {\n        return this.issuePrometheusQuery(prometheusDS, cpuQuery);\n      })\n      .then(data => {\n        cpuPerNode = data;\n        return;\n      }).then(() => {\n        return this.issuePrometheusQuery(prometheusDS, memoryQuery);\n      })\n      .then(data => {\n        memoryPerNode = data;\n        return {podsPerNode, cpuPerNode, memoryPerNode};\n      });\n  }\n\n  updateNodeWithStats(node, nodeStats) {\n    var formatFunc = kbn.valueFormats['percentunit'];\n    const nodeName = slugify(node.metadata.name);\n    const findFunction = function(o) {return o.target.substring(7, o.target.length - 2) === nodeName;};\n    const podsUsedData = _.find(nodeStats.podsPerNode, findFunction);\n    if (podsUsedData) {\n      node.podsUsed = _.last(podsUsedData.datapoints)[0];\n      node.podsUsedPerc = formatFunc(node.podsUsed / node.status.capacity.pods, 2, 5);\n    }\n\n    const cpuData = _.find(nodeStats.cpuPerNode, findFunction);\n    if (cpuData) {\n      node.cpuUsage = _.last(cpuData.datapoints)[0];\n      node.cpuUsageFormatted = kbn.valueFormats['none'](node.cpuUsage, 2, null);\n      node.cpuUsagePerc = formatFunc(node.cpuUsage / node.status.capacity.cpu, 2, 5);\n    }\n\n    const memData = _.find(nodeStats.memoryPerNode, findFunction);\n    if (memData) {\n      node.memoryUsage = _.last(memData.datapoints)[0];\n      const memCapacity = node.status.capacity.memory.substring(0, node.status.capacity.memory.length - 2)  * 1000;\n      node.memUsageFormatted = kbn.valueFormats['bytes'](node.memoryUsage, 2, null);\n      node.memCapacityFormatted = kbn.valueFormats['bytes'](memCapacity, 2, null);\n      node.memoryUsagePerc = formatFunc((node.memoryUsage / memCapacity), 2, 5);\n    }\n\n    return node;\n  }\n}\n\nfunction slugify(str) {\n  var slug = str.replace(\"@\", \"at\").replace(\"&\", \"and\").replace(/[.]/g, \"_\").replace(\"/\\W+/\", \"\");\n  return slug;\n}\n"]}